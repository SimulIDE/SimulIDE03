'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program displays multiple BMPs on a GLCD.
'''This uses the BMPtoGCB converter to create the required GCB table.  Any mono BMP can be converted.
'''Two tables has been imported to this program.  Five can be supported.  These tables were created using BMP2GCB.EXE then imported.
'''The main code is generic.  This uses a table called 'TableData'.  The 'TableData' table contains the required information to describe the original BMP.
'''To support thr generic approach the defines redirects to the table data. If you import a new BMP table simply change the define to the new table definition.
'''Replace the existing table data with your data BMP to a table.
'''You can define five BMP tables.
'''YOU MUST RETAIN THE 'GCLDTABLEn' NAMING CONVENTION!!!
'''So, you can easily remember the name of your BMP using the define statements.  Then, call the display subroutine GLCDBMPLoad ( 0, 0, Anobium  ). Where the parameters are XPos, YPos, TableName.
'''The GLCD hardware configuation is shown in the hardware section of this program.
'''
'''
'''@author          EvanV plus works of HughC        	
'''@licence	GPL
'''@version	1.0a
'''@date   	31.01.2015
'''********************************************************************************

; ----- Configuration

 #chip 18f4550, 20
 #option explicit
 #include <glcd.h>

; ----- Constants
  ' No Constants specified in this example.
  ' See below.

; ----- Define Hardware settings
  #define GLCD_TYPE GLCD_TYPE_KS0108
  #define GLCD_WIDTH 128
  #define GLCD_HEIGHT 64

  #define GLCD_CS1 PORTC.0    'D12 to actually since CS1, CS2 can be reversed on some devices
  #define GLCD_CS2 PORTC.1
  #define GLCD_DB0 PORTD.0 'D0 to pin 7 on LCD
  #define GLCD_DB1 PORTD.1 'D1 to pin 8 on LCD
  #define GLCD_DB2 PORTD.2 'D2 to pin 9 on LCD
  #define GLCD_DB3 PORTD.3 'D3 to pin 10 on LCD
  #define GLCD_DB4 PORTD.4 'D4 to pin 11 on LCD
  #define GLCD_DB5 PORTD.5 'D5 to pin 12 on LCD
  #define GLCD_DB6 PORTD.6 'D6 to pin 13 on LCD
  #define GLCD_DB7 PORTD.7 'D7 to pin 14 on LCD

  #define GLCD_RS PORTe.0
  #define GLCD_Enable PORTe.2
  #define GLCD_RW PORTe.1
  #define GLCD_RESET PORTC.2


; ----- Variables
  OptmiseGLCDDraw  = 0            ; either 0 or 1.  Needs to match the background pixel state. Makes drawing faster.
  ' These must be WORDs as this is required to handle large tables.
  Dim TableReadPosition, TableLen,SelectedTable as word
  Dim OPTMISEGLCDDRAW, OBJWIDTH, OBJHEIGHT, OLDGLCDXPOS, WHOLEYBYTES, HCOUNT, GLCDY, WIDTHCOUNT, WBYTE, ONPAGEBOUNDARY, GLCDX, CURRPAGE, CURRPAGE, MAXHEIGHT, CURRCHARROW, WBYTE as Byte
  Dim lastImg as byte

; ----- Quick Command Reference:
  'You should then do the following.
  'Replace the existing table data with your data BMP to a table.
  'You can define five BMP as a table.
  'Pick any of the five tables.  YOU MUST RETAIN THE GCLDTABLEn NAMING CONVENTION
  'Then, so, you can easily remember the name of you BMP use a define
  'Then, call the subroutine, an example GLCDBMPLoad ( 0, 0, Anobium  )
  #define Anobium      @GLCDTable1
  #define GCB          @GLCDTable2
'  #define Another1     @GLCDTable3
'  #define Another2     @GLCDTable4
'  #define Another3     @GLCDTable5
; ----- Main body of program commences here.

  lastImg = 2
  
  do forever

    if PORTB.0 = 0 then
        if lastImg <> 0 then
            GLCDCLS
            GLCDBMPLoad ( 34, 0, Anobium  )
            wait 750 ms
        end if
        lastImg = 0
    end if

    if PORTB.0 = 1 then
        if lastImg <> 1 then
            GLCDCLS
            GLCDBMPLoad ( 20, 0, GCB  )
            wait 750 ms
        end if
        lastImg = 1
    end if

'    GLCDCLS
'    GLCDBMPLoad ( 0, 0, Another1 )
'    wait 750 ms
'
'    GLCDCLS
'    GLCDBMPLoad ( 0, 0, Another2 )
'    wait 750 ms
'
'    GLCDCLS
'    GLCDBMPLoad ( 0, 0, Another3 )
'    wait 750 ms


  loop
  end

; ----- Support methods.  Subroutines and Functions
  sub GLCDBMPLoad ( in GLCDXPos, in GLCDYPos, in SelectedTable as word )

    ' Start of code
    TableReadPosition = 1

    'Read selected table
    Select Case SelectedTable
        Case @GLCDTable1: ReadTable GLCDTable1, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable1, TableReadPosition, objHeight
        Case @GLCDTable2: ReadTable GLCDTable2, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable2, TableReadPosition, objHeight
        Case @GLCDTable3: ReadTable GLCDTable3, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable3, TableReadPosition, objHeight
        Case @GLCDTable4: ReadTable GLCDTable4, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable4, TableReadPosition, objHeight
        Case @GLCDTable5: ReadTable GLCDTable5, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable5, TableReadPosition, objHeight
    End Select


    oldGLCDXPos = GLCDXPos
    TableReadPosition = 3

    WholeYBytes = objHeight /  8               ; Number of whole bytes within Y Axis.  This is integer maths!

    onPageBoundary = ( GLCDYPos % 8 ) = 0      ; If GLCDYPos as a memory page boundary.  Used to fast write the byte

      if WholeYBytes <> 0 then

          for hCount = 0 to (WholeYBytes - 1)  ; counter to number of whole bytes

              ' it is safe to use GLCDY and X here as PSET is not called when this is used as a variable
                GLCDY = GLCDYPos+hCount
                for widthCount = 0 to (objwidth - 1)  ; increment thru bytes horizontally
                    'Read selected table
                    Select Case SelectedTable
                    Case @GLCDTable1: ReadTable GLCDTable1, TableReadPosition, wByte

                    Case @GLCDTable2: ReadTable GLCDTable2, TableReadPosition, wByte

                    Case @GLCDTable3: ReadTable GLCDTable3, TableReadPosition, wByte

                    Case @GLCDTable4: ReadTable GLCDTable4, TableReadPosition, wByte

                    Case @GLCDTable5: ReadTable GLCDTable5, TableReadPosition, wByte

                    End Select
                    TableReadPosition++

                    if wByte <> OptmiseGLCDDraw then             ; if the incoming byte is the same as the background, dont draw
                       ' So,  we have to draw this byte
                       ' If a a page boundary  this is a faster draw routine
                       if onPageBoundary = true then
                          ' use fast draw byte - essentially just write the data out, no, reading whats there.
                          GLCDX = GLCDXPos+widthCount
                          If GLCDX.6 = Off Then
                             Set GLCD_CS2 On
                             Set GLCD_CS1 off
                          end if
                          If GLCDX.6 = On Then
                             Set GLCD_CS1 On
                             GLCDX -= 64
                             Set GLCD_CS2 off
                          end if

                          'Select page
                          CurrPage = GLCDY / 8
                          Set GLCD_RS Off
                          GLCDWriteByte b'10111000' Or CurrPage
                          		
                          'Select column
                          GLCDWriteByte 64 Or GLCDX
                          'Write data back
                          Set GLCD_RS On
                          GLCDWriteByte wByte

                       else

                          ' slow draw using X Y position and interate throught the bits
                          For CurrCharRow = 0 to 7
                                    If wByte.0 = 0 Then
                                              PSet GLCDXPos+widthCount, CurrCharRow + GLCDYPos, GLCDBackground
                                    Else
                                              PSet GLCDXPos+widthCount, CurrCharRow + GLCDYPos, GLCDForeground
                                    End If
                                    Rotate wByte Right
                          Next
                       end if

                     end if

                next widthCount

                GLCDXPos =  oldGLCDXPos
                GLCDYPos = GLCDYPos + 8

          next hCount

      end if

      maxHeight = objHeight % 8       ; calculate the remaining bits

      'writes and remaining bits, if any
      if maxHeight <> 0 then

        for widthCount = 0 to objwidth - 1
          'Read selected table
            Select Case SelectedTable
            Case @GLCDTable1: ReadTable GLCDTable1, TableReadPosition, wByte

            Case @GLCDTable2: ReadTable GLCDTable2, TableReadPosition, wByte

            Case @GLCDTable3: ReadTable GLCDTable3, TableReadPosition, wByte

            Case @GLCDTable4: ReadTable GLCDTable4, TableReadPosition, wByte

            Case @GLCDTable5: ReadTable GLCDTable5, TableReadPosition, wByte

            End Select
            TableReadPosition++

              ' slow draw using X Y position and interate throught the bits
              For CurrCharRow = 0 to maxHeight-1
                        If wByte.0 = 0 Then
                                  PSet GLCDXPos+widthCount, ( CurrCharRow + GLCDYPos ), GLCDBackground
                        Else
                                  PSet GLCDXPos+widthCount, ( CurrCharRow + GLCDYPos ), GLCDForeground
                        End If
                        Rotate wByte Right
              Next
        next
      end if
      Set GLCD_CS1 Off
      Set GLCD_CS2 Off
  end sub

Table GLCDTable1
' Anobium.bmp as a Table
' start data
0x3C
0x40
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xE0
0x00
0xC0
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x40
0xC0
0xB0
0x60
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xC0
0x70
0xDE
0x73
0x1C
0x07
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x03
0x06
0x0D
0x1B
0x3E
0xEC
0x18
0x10
0x10
0x10
0x18
0x18
0x08
0x08
0x0C
0x0C
0x0C
0x04
0x04
0x04
0x06
0x06
0x02
0x02
0x02
0x03
0x03
0x01
0x01
0x03
0x0F
0x1C
0x70
0xE0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xFF
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x07
0x0E
0x38
0x70
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xFF
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xC0
0x63
0x36
0x1C
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x07
0x0C
0x08
0x18
0x10
0x30
0x30
0x20
0x60
0x40
0xC0
0xC0
0x80
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xC0
0x70
0x38
0x1C
0x0E
0x03
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xC0
0x20
0xC0
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x03
0x03
0x02
0x06
0x04
0x0C
0xEC
0x08
0x0C
0x06
0x03
0x01
0x00
0x00
0x20
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xC0
0x38
0x16
0x11
0x10
0x11
0x16
0x38
0xC0
0x00
0xFF
0x02
0x01
0x01
0x01
0xFE
0x00
0x00
0x7E
0x81
0x81
0x81
0x81
0x7E
0x00
0x00
0xFF
0x42
0x81
0x81
0x81
0x7E
0x00
0x00
0xFF
0x00
0x00
0x7F
0x80
0x80
0x80
0x40
0xFF
0x00
0x00
0xFF
0x02
0x01
0x01
0x01
0xFE
0x02
0x01
0x01
0x01
0xFE
End Table

Table GLCDTable2
' start data
' The GCB Logo as a Table
0x54
0x3F
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x20
0x60
0xC0
0x80
0x80
0xC0
0xE0
0xE0
0xE0
0xF0
0xB8
0xDE
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xC0
0xE0
0xF0
0xF8
0xF8
0xF8
0xF8
0xF8
0xF8
0xF8
0xF0
0xF0
0xF0
0xF0
0xF0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xF0
0xF0
0xF0
0xF0
0xF0
0xF8
0xF8
0xF8
0xF8
0xFC
0xFC
0xFC
0xFC
0xFC
0xFC
0xFC
0xFC
0xFE
0xFE
0xFE
0xFE
0xFE
0xFE
0xFE
0xFE
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xF1
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xF8
0xFE
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x7F
0x3F
0x3F
0x3F
0x3F
0x1E
0x0C
0x00
0x00
0x00
0x00
0x00
0x00
0xE0
0xFF
0x07
0x3F
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x3F
0x3F
0x3F
0x19
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xFC
0xFF
0xFF
0x00
0x00
0x01
0x0F
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x7F
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x7F
0x7F
0x7F
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x7F
0x3F
0x1F
0x0F
0x07
0x03
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xFF
0xFF
0xFF
0x1F
0x00
0x00
0xF0
0xFC
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x0F
0x1F
0x0F
0x07
0x0F
0x01
0x00
0x00
0x00
0x00
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0xFF
0xFF
0x3F
0x0F
0x03
0x00
0x2F
0xFF
0xFF
0xFF
0x7F
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x03
0x03
0x01
0x00
0x00
0x00
0x00
0xFF
0xFF
0xFF
0x07
0x01
0x07
0x1F
0xFF
0xFF
0xF0
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x14
0x1F
0x1F
0x1F
0x10
0x00
0x00
0x00
0x00
0xFF
0xFF
0xFF
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x0C
0x3F
0x7F
0x7F
0x78
0x00
0x00
0x00
0x03
0x03
0x07
0x03
0x03
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x01
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00

End Table

Table GLCDTable3
    1, 0, 255
End Table

Table GLCDTable4
    1, 0, 255
End Table

Table GLCDTable5
    1, 0, 255
End Table
